{"version":3,"sources":["img/Fairuz-kun_logo_2020_4_512px.png","components/header.jsx","components/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","Color1","setState","headColor","Color2","Color3","state","id","className","onClick","this","to","src","logo","alt","Component","Footer","Home","lazy","Artwork","About","App","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,0D,+OCItBC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAKRC,OAAS,WACP,EAAKC,SAAS,CACZC,UAAW,YARI,EAYnBC,OAAS,WACP,EAAKF,SAAS,CACZC,UAAW,YAdI,EAkBnBE,OAAS,WACP,EAAKH,SAAS,CACZC,UAAW,YAlBb,EAAKG,MAAQ,CAACH,UAAW,IAFR,E,sEA0BjB,OACE,4BAAQI,GAAG,SAASC,UAAU,UAC5B,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAAMC,QAASC,KAAKT,OAAQU,GAAI,KAC9B,yBAAKH,UAAU,QACb,yBAAKI,IAAKC,IAAMC,IAAI,KACpB,yBAAKN,UAAU,aAAf,eAGJ,6BACE,kBAAC,IAAD,CAAMC,QAASC,KAAKT,OAAQU,GAAI,IAAKH,UAAU,MAAK,sCACpD,kBAAC,IAAD,CAAMC,QAASC,KAAKN,OAAQO,GAAI,WAAYH,UAAU,MAAK,yCAC3D,kBAAC,IAAD,CAAMC,QAASC,KAAKL,OAAQM,GAAI,SAAUH,UAAU,MAAK,sD,GAvCjCO,aCDfC,E,iLAEjB,OACE,qC,GAH8BD,aCI9BE,EAAOC,gBAAK,kBAAM,gCAClBC,EAAUD,gBAAK,kBAAM,gCACrBE,EAAQF,gBAAK,kBAAM,gCAsDVG,E,iLAhDX,OACE,yBAAKb,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,gBAAd,eAKR,yBAAKA,UAAU,QACb,0BAAMA,UAAU,uBACd,kBAAC,WAAD,CAAUc,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWL,SAsB5C,kBAAC,EAAD,W,GA9CUL,aCCEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b77d74fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Fairuz-kun_logo_2020_4_512px.32788121.png\";","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, browserHistory, Link } from 'react-router-dom';\r\nimport logo from '../img/Fairuz-kun_logo_2020_4_512px.png';\r\n\r\nexport default class Header extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {headColor: ''}\r\n  }\r\n\r\n  \r\n  Color1 = () => {\r\n    this.setState({\r\n      headColor: 'color1'\r\n    })\r\n  }\r\n\r\n  Color2 = () => {\r\n    this.setState({\r\n      headColor: 'color2'\r\n    })\r\n  }\r\n\r\n  Color3 = () => {\r\n    this.setState({\r\n      headColor: 'color3'\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <header id=\"navbar\" className=\"sticky\">\r\n        <div className=\"header\">\r\n          <Link onClick={this.Color1} to={'/'}>\r\n            <div className=\"logo\">\r\n              <img src={logo} alt=\"\"/>\r\n              <div className=\"logo-text\">Fairu-zu_</div>\r\n            </div>\r\n          </Link>\r\n          <nav>\r\n            <Link onClick={this.Color1} to={'/'} className=\"nm\"><div>Home</div></Link>\r\n            <Link onClick={this.Color2} to={'/artwork'} className=\"nm\"><div>Artwork</div></Link>\r\n            <Link onClick={this.Color3} to={'/about'} className=\"nm\"><div>About/Contact</div></Link>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n      \r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer>\r\n\r\n      </footer>\r\n    );\r\n  }\r\n}","import React, { Component, Suspense, lazy } from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nimport Header from './components/header';\nimport Footer from './components/footer';\n\nconst Home = lazy(() => import('./components/home'));\nconst Artwork = lazy(() => import('./components/artwork'));\nconst About = lazy(() => import('./components/about'));\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Router>\n          <Header />\n          <div className=\"content\">\n            <div className=\"container\">\n              <div className=\"container-bg\">\n                <div className=\"blackout\">\n                  <div className=\"container-content\">\n                    <h1 className=\"welcome-text\">WELCOME</h1>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"main\">\n              <span className=\"main-border color1\"></span>\n                <Suspense fallback={<div>Loading...</div>}>\n                  <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route path='/artwork' component={Artwork} />\n                    <Route path='/about' component={About} />\n                  </Switch>\n                </Suspense>\n            </div>\n          </div>\n          {/*\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n          </header>\n          */}\n        </Router>\n        <Footer />\n      </div> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  ),\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}